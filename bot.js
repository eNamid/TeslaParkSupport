const express = require('express');
const fs = require('fs');
const {
    Bot,
    InputFile,
    webhookCallback,
} = require("grammy");
const {
    StatelessQuestion
} = require('@grammyjs/stateless-question');
const CyclicDb = require("@cyclic.sh/dynamodb");
const db = CyclicDb("real-rose-macaw-hatCyclicDB");
const { 
    menu,
    tesla,
    tesla_manual,
    volkswagen,
    honda,
    other,
    del,
    service,
    china_car,
    charge_home,
    charge_public,
    telephone,
    general
} = require('./button');

const assort = db.collection('assort')
const profiles = db.collection('profiles');
const app = express();

const modelS = new InputFile('./manual/Tesla_Model_S_2021+(en).pdf');
const model3 = new InputFile('./manual/Tesla_Model_3_(ru).pdf');
const modelX = new InputFile('./manual/Tesla_Model_X_2021+(en).pdf');
const modelY = new InputFile('./manual/Tesla_Model_Y_(ru).pdf');
const modelS2012 = new InputFile('./manual/Tesla_Model_S_(ru)_2012-2020.pdf');
const modelX2015 = new InputFile('./manual/Tesla_Model_X_(ru)_2015-2020.pdf');
const teslaApp = new InputFile('./manual/TeslaApp.pdf');
const eco = new InputFile('./imagine/eco.png');

const photo = new InputFile('./imagine/img.jpg');
const tes = new InputFile('./imagine/tes.jpg');
const volk = new InputFile('./imagine/volk.jpg');
const hon = new InputFile('./imagine/hon.jpg');

const bot = new Bot(process.env.TELEGRAM_TOKEN || "5882418082:AAHjEfquIghgXsE-IwJO81rjF_NKbU3see8");

const BOT_DEVELOPER = 353785249; // —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞

bot.use(async (ctx, next) => {
    // –ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –æ–±‚Äô—î–∫—Ç —Ç—É—Ç, –≤—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é.
    ctx.config = {
        botDeveloper: BOT_DEVELOPER,
        isDeveloper: ctx.from?.id === BOT_DEVELOPER,
    };
    // –ó–∞–ø—É—Å–∫ —ñ–Ω—à–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    await next();
});

// Start Group
bot.command("start", async (ctx) => {
    bot.api.sendPhoto(ctx.msg.chat.id, photo, {
        caption: "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! \n–í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –∫–æ–º–ø–∞–Ω—ñ—ó Tesla Park \n \n–î–ª—è –ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º–∞—Ä–∫—É –í–∞—à–æ–≥–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—èüëá",
        reply_markup: menu,
    });
});

bot.command('delate', async (ctx) => {
    profiles.delete(String(ctx.chat.id));
});

bot.command('delete', async (ctx) => {
    assort.delete();
});

const batteryDb = new StatelessQuestion('batteryDb', async (ctx) => {
    let text = ctx.message.text.split(',');
    let setDb = await assort.set(text[0], {
        name: text[1],
        capacity: text[2],
        power: text[3],
        weight: text[4],
        price: text[5]
    });
    console.log(setDb);
});

bot.use(batteryDb.middleware());

bot.command('addassort', async (ctx) => {
    batteryDb.replyWithMarkdown(ctx, `–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É: 
    1. –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —Ç–æ–≤–∞—Ä—É (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø—ñ–∑–ª—è –∫–æ–¥—É –∫–æ–º–∞)
    2. –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∫–æ–º–∞ –ø—ñ—Å–ª—è –Ω–∞–∑–≤–∏)
    3. –í–≤–µ–¥—ñ—Ç—å —î–º–∫—ñ—Å—Ç—å (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∫–æ–º–∞ –ø—ñ—Å–ª—è —î–º–∫–æ—Å—Ç—ñ)
    4. –í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∫–æ–º–∞ –ø—ñ—Å–ª—è –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ)
    5. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É
    –ü—Ä–∏–∫–ª–∞–¥: 1, EcoFlow 100500, 750 –í—Ç, 100000 mAh, 29999 –≥—Ä–Ω`);
});

bot.command('allProducts', async (ctx) => {
    const battery = await assort.list();
    const items = [];
    for (const item of battery.results) {
        const { name} = (await item.get()).props;
        items.push({
            id: item.key,
            name
        });
    }
    if (items.length > 0) {
        const text = items.map((item) => {
            return `
–ö–æ–¥ —Ç–æ–≤–∞—Ä—É: \`${item.id}\`
${item.name.trim()}
`
        });
        bot.api.sendMessage(ctx.chat.id, text.join(''), {
            parse_mode: 'MarkdownV2'
        });
    }
});

//TO (–¢–µ—Ö–Ω—ñ—á–Ω–∏–π –û–≥–ª—è–¥)
bot.on("message:contact", async (ctx) => {
    await profiles.set(String(ctx.chat.id), {
        username: ctx.msg.from.username,
        phone: ctx.msg.contact.phone_number,
    });
    TO.replyWithMarkdown(ctx, '–û–ø–∏—à—ñ—Ç—å, —â–æ –≤–∞—Å —Ç—É—Ä–±—É—î', {
        reply_markup: {
            force_reply: true
        },
    });
});
bot.callbackQuery('call_to', async (ctx) => {
    const profile = await profiles.get(String(ctx.chat.id));
    bot.api.deleteMessage(ctx.chat.id, ctx.msg.message_id);
    if (profile && profile.props.phone) {
        if(profile.props.isTO) {
            bot.api.sendPhoto(ctx.chat.id, photo, {
                caption: '–í–∞—à –∑–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å, –∑–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞.',
                reply_markup: general
            });
        } else {
            TO.replyWithMarkdown(ctx, '–û–ø–∏—à—ñ—Ç—å, —â–æ –≤–∞—Å —Ç—É—Ä–±—É—î', {
                reply_markup: {
                    force_reply: true
                },
            });
        }
    } else {
        bot.api.sendMessage(ctx.chat.id, '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É', {
            reply_markup: {
                keyboard: telephone.build(),
                one_time_keyboard: true,
            }
        }); 
    }
});

const TO = new StatelessQuestion('to', async ctx => {
    await profiles.set(String(ctx.chat.id), {
        isTO: true,
    });

    const profile = await profiles.get(String(ctx.chat.id));

    if (profile) {
        const { phone, username } = profile.props;
        bot.api.sendMessage(-1001884649683, `
${ctx.chat.id}

${phone}
@${username}

–í—ñ–¥–ø—Ä–∞–≤–∏–≤ –ø–∏—Ç–∞–Ω–Ω—è: ${ctx.msg.text}
    `, {
        reply_markup: del,
    });
    }
    bot.api.sendPhoto(ctx.msg.chat.id, photo, {
        caption: "–í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º, –æ—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞",
        reply_markup: general,
    });
});

bot.use(TO.middleware());

//Diagnostics (–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)
bot.on("message:contact", async (ctx) => {
    await profiles.set(String(ctx.chat.id), {
        username: ctx.msg.from.username,
        phone: ctx.msg.contact.phone_number,
    });
    diagnostics.replyWithMarkdown(ctx, '–û–ø–∏—à—ñ—Ç—å, —â–æ –≤–∞—Å —Ç—É—Ä–±—É—î', {
        reply_markup: {
            force_reply: true
        },
    });
});
bot.callbackQuery('call_diagnostics', async (ctx) => {
    const profile = await profiles.get(String(ctx.chat.id));
    bot.api.deleteMessage(ctx.chat.id, ctx.msg.message_id);
    if (profile && profile.props.phone) {
        if(profile.props.isDiagnostics) {
            bot.api.sendPhoto(ctx.chat.id, photo, {
                caption: '–í–∞—à –∑–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å, –∑–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞.',
                reply_markup: general
            });
        } else {
            diagnostics.replyWithMarkdown(ctx, '–û–ø–∏—à—ñ—Ç—å, —â–æ –≤–∞—Å —Ç—É—Ä–±—É—î', {
                reply_markup: {
                    force_reply: true
                },
            });
        }
    } else {
        bot.api.sendMessage(ctx.chat.id, '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É', {
            reply_markup: {
                keyboard: telephone.build(),
                one_time_keyboard: true,
            }
        }); 
    }
});

const diagnostics = new StatelessQuestion('diagnos', async ctx => {
    await profiles.set(String(ctx.chat.id), {
        isDiagnostics: true,
    });

    const profile = await profiles.get(String(ctx.chat.id));

    if (profile) {
        const { phone, username } = profile.props;
        bot.api.sendMessage(-1001884649683, `
${ctx.chat.id}

${phone}
@${username}

–í—ñ–¥–ø—Ä–∞–≤–∏–≤ –ø–∏—Ç–∞–Ω–Ω—è: ${ctx.msg.text}
    `, {
        reply_markup: del,
    });
    }
    bot.api.sendPhoto(ctx.msg.chat.id, photo, {
        caption: "–í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º, –æ—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞",
        reply_markup: general,
    });
});

bot.use(diagnostics.middleware());


//Questions (–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç)
bot.on("message:contact", async (ctx) => {
    await profiles.set(String(ctx.chat.id), {
        username: ctx.msg.from.username,
        phone: ctx.msg.contact.phone_number,
    });
    question.replyWithMarkdown(ctx, '–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è', {
        reply_markup: {
            force_reply: true
        },
    });
});
bot.callbackQuery('call_oper', async (ctx) => {
    const profile = await profiles.get(String(ctx.chat.id));
    bot.api.deleteMessage(ctx.chat.id, ctx.msg.message_id);
    if (profile && profile.props.phone) {
        if (profile.props.isRequested) {
            bot.api.sendPhoto(ctx.chat.id, photo, {
                caption: '–í–∞—à –∑–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å, –∑–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞.',
                reply_markup: general
            });
        } else {
            question.replyWithMarkdown(ctx, '–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è', {
                reply_markup: {
                    force_reply: true
                },
            });
        }   
    } else {
        bot.api.sendMessage(ctx.chat.id, '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É', {
            reply_markup: {
                keyboard: telephone.build(),
                one_time_keyboard: true,
            }
        }); 
    }
});

const question = new StatelessQuestion('quest', async ctx => {
    await profiles.set(String(ctx.chat.id), {
        isRequested: true,
    });

    const profile = await profiles.get(String(ctx.chat.id));

    if (profile) {
        const { phone, username } = profile.props;
        bot.api.sendMessage(-1001884649683, `
${ctx.chat.id}

${phone}
@${username}

–í—ñ–¥–ø—Ä–∞–≤–∏–≤ –ø–∏—Ç–∞–Ω–Ω—è: ${ctx.msg.text}
    `, {
        reply_markup: del,
    });
    }
    bot.api.sendPhoto(ctx.msg.chat.id, photo, {
        caption: "–í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º, –æ—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞",
        reply_markup: general,
    });
});

bot.use(question.middleware());

bot.callbackQuery('call_del', async (ctx) => {
    const chatId = ctx.msg.text.split('\n')[0];

    bot.api.editMessageText(ctx.chat.id, ctx.msg.message_id, `–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ–±—Ä–æ–±–∏–≤ @${ctx.callbackQuery.from.username}`);
    await profiles.set(String(chatId), {
        isRequested: false,
        isDiagnostics: false,
        isTO: false,
    });
});

// Tesla Group
bot.callbackQuery('call_tesla', async (ctx) => {
    bot.api.editMessageMedia(ctx.chat.id, ctx.msg.message_id, {
        type: 'photo',
        media: tes,
        caption: '–Ø–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞—Å —Ç—É—Ä–±—É—î?',
    }, {
        reply_markup: tesla,
    });
});

bot.callbackQuery('call_tesla_manual', async (ctx) => {
    bot.api.editMessageMedia(ctx.chat.id, ctx.msg.message_id,  {
        type: 'photo',
        media: photo,
        caption: '–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å.',
    }, {
        reply_markup: tesla_manual,
    });
});

bot.callbackQuery(['call_model_s', 'call_model_3', 'call_model_x', 'call_model_y', 'call_model_s2012', 'call_model_x2015', 'call_app'], async (ctx) => {
    let  file = {}
    switch (ctx.callbackQuery.data) {
        case 'call_model_s':
            file = modelS
        break;
        case 'call_model_3':
            file = model3
        break;
        case 'call_model_x':
            file = modelX
        break;
        case 'call_model_y':
            file = modelY
        break;
        case 'call_model_s2012':
            file = modelS2012
        break;
        case 'call_model_x2015':
            file = modelX2015
        break;
        case 'call_app':
            file = teslaApp
        break;
    }
        const message = await bot.api.sendMessage(ctx.chat.id, '–Ü—Å—Ç—Ä—É–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è, –∑–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞...');
        await bot.api.sendDocument(ctx.chat.id, file);
        bot.api.deleteMessage(ctx.chat.id, message.message_id);
});

bot.callbackQuery('call_charge_home', async (ctx) => {
    bot.api.editMessageMedia(ctx.chat.id, ctx.msg.message_id, {
        type: 'photo',
        media: photo,
        caption: '',
    }, {
        reply_markup: charge_home,
    });
});

bot.callbackQuery('call_charge_public', async (ctx) => {
    bot.api.editMessageMedia(ctx.chat.id, ctx.msg.message_id, {
        type: 'photo',
        media: photo,
        caption: '',
    }, {
        reply_markup: charge_public,
    });
});

bot.callbackQuery('call_app', async (ctx) => {
    const message = await bot.api.sendMessage(ctx.chat.id, '–Ü—Å—Ç—Ä—É–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è, –∑–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞...');
    await bot.api.sendDocument(ctx.chat.id, teslaApp);
    bot.api.deleteMessage(ctx.chat.id, message.message_id);
});

//China Group
bot.callbackQuery('call_china_car', async (ctx) => {
    bot.api.editMessageMedia(ctx.chat.id, ctx.msg.message_id, {
        type: 'photo',
        media: tes,
        caption: '–û–±–µ—Ä—ñ—Ç—å –º–∞—Ä–∫—É –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ.',
    }, {
        reply_markup: china_car,
    });
});

bot.callbackQuery(['call_volks', 'call_honda'], async (ctx) => {
    const opts = {
        media: '',
        caption: '',
        keyboard: ''
    }
    switch (ctx.callbackQuery.data) {
        case 'call_volks':
                opts.media = volk;
                opts.caption = '–Ø–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞—Å —Ç—É—Ä–±—É—î?';
                opts.keyboard = volkswagen;
        break;
        case 'call_honda':
                opts.media = hon;
                opts.caption = '–Ø–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞—Å —Ç—É—Ä–±—É—î?';
                opts.keyboard = honda;
        break;
    }
    bot.api.editMessageMedia(ctx.chat.id, ctx.msg.message_id, {
        type: 'photo',
        media: opts.media,
        caption: opts.caption,
    }, {
        reply_markup: opts.keyboard,
    });
});
bot.callbackQuery('call_accessories', async (ctx) => {
    
});

//EcoFlow
bot.callbackQuery('call_ecoflow', async (ctx) => {
    const battery = await assort.list();
    const items = [];
    for (const item of battery.results) {
        const { name, capacity, power, weight, price } = (await item.get()).props;
        items.push({
            name, 
            capacity,
            power,
            weight,
            price
        });
    }
    if (items.length > 0) {
        const text = items.map((item) => {
            return `
${item.name.trim()}
–Ñ–º–∫—ñ—Å—Ç—å: ${item.capacity} 
–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: ${item.power}
–í–∞–≥–∞: ${item.weight}
–¶—ñ–Ω–∞: ${item.price}
`
        });
        bot.api.editMessageMedia(ctx.chat.id, ctx.msg.message_id, {
            type: 'photo',
            media: eco,
            caption: '\n \n –ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª –∂–∏–≤–ª–µ–Ω–Ω—è –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: \n' + text.join('') + `
–ë–∞–∂–∞—î—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏? 
–ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–∞ –Ω–æ–º–µ—Ä–æ–º: +380971234567
            `
        }, {
            reply_markup: general,
            parse_mode: 'MarkdownV2'
        });
    }
});

// Service Group
bot.callbackQuery('call_service', async (ctx) => {
    bot.api.editMessageMedia(ctx.chat.id, ctx.msg.message_id, {
        type: 'photo',
        media: photo,
        caption: '–ù–∞ —è–∫—É –ø–æ—Å–ª—É–≥—É –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å?'
    }, {
        reply_markup: service,
    });
});
// Other Group
bot.callbackQuery('call_other', async (ctx) => {
    bot.api.editMessageCaption(ctx.chat.id, ctx.msg.message_id, {
        caption: '–Ø–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞—Å —Ç—É—Ä–±—É—î?',
        reply_markup: other,
    });
});

//General Group
bot.callbackQuery('back_page', async (ctx) => {
    bot.api.editMessageMedia(ctx.chat.id, ctx.msg.message_id, {
        type: 'photo',
        media: photo,
        caption: '–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! \n–í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –∫–æ–º–ø–∞–Ω—ñ—ó Tesla Park \n \n–î–ª—è –ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º–∞—Ä–∫—É –í–∞—à–æ–≥–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—èüëá',
    }, {
        reply_markup: menu,
    });
});

if (process.env.NODE_ENV === "production") {

    app.use(express.json());
    app.use(webhookCallback(bot, "express"));

    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
        console.log(`Bot listening on port ${PORT}`);
    });
} else {

    bot.start();
}